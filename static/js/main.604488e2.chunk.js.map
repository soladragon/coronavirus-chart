{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","props","growthRate","casesArray","state","data","datasets","deathsArray","hospArray","labels","i","length","pop","last_element","last_element1","last_element3","date","moment","add","format","push","console","log","setState","isLoaded","growth","arrayTotal","past","growthPercentage","pastKey","averageGrowthPercent","error","isLoaded2","items","dataTotals","totalCases","totalDeaths","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","cases","deaths","this","dates","firstVaccinationsDaily","secondVaccinationsDaily","test","someProperty","unshift","fetch","then","res","json","result","map","resultItem","totals","casesDaily","deathsDaily","addDateCasesDeaths","message","redraw","width","height","options","maintainAspectRatio","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","module","exports"],"mappings":"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","file":"static/js/main.604488e2.chunk.js","sourcesContent":["import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport {Line} from 'react-chartjs-2';\r\nimport Moment from 'react-moment';\r\nimport moment from 'moment';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      error: null,\r\n      isLoaded: false,\r\n      isLoaded2: false,\r\n      items: [],\r\n      dataTotals:{\r\n          totalCases: 0,\r\n          totalDeaths: 0,\r\n      },\r\n      data: {\r\n        totalCases: 0,\r\n        totalDeaths: 0,\r\n        labels: [],\r\n        datasets: [\r\n          {\r\n            label: 'Cases',\r\n            fill: false,\r\n            lineTension: 0.1,\r\n            backgroundColor: 'rgba(75,192,192,0.4)',\r\n            borderColor: 'rgba(75,192,192,1)',\r\n            borderCapStyle: 'butt',\r\n            borderDash: [],\r\n            borderDashOffset: 0.0,\r\n            borderJoinStyle: 'miter',\r\n            pointBorderColor: 'rgba(75,192,192,1)',\r\n            pointBackgroundColor: '#fff',\r\n            pointBorderWidth: 1,\r\n            pointHoverRadius: 5,\r\n            pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n            pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n            pointHoverBorderWidth: 2,\r\n            pointRadius: 1,\r\n            pointHitRadius: 10,\r\n            data: []\r\n          },\r\n          {\r\n            label: 'Deaths',\r\n            fill: false,\r\n            lineTension: 0.1,\r\n            backgroundColor: 'rgba(75,192,192,0.4)',\r\n            borderColor: 'red',\r\n            borderCapStyle: 'butt',\r\n            borderDash: [],\r\n            borderDashOffset: 0.0,\r\n            borderJoinStyle: 'miter',\r\n            pointBorderColor: 'rgba(75,192,192,1)',\r\n            pointBackgroundColor: '#fff',\r\n            pointBorderWidth: 1,\r\n            pointHoverRadius: 5,\r\n            pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n            pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n            pointHoverBorderWidth: 2,\r\n            pointRadius: 1,\r\n            pointHitRadius: 10,\r\n            data: []\r\n          },\r\n          {\r\n            label: 'Case Estimate',\r\n            fill: false,\r\n            lineTension: 0.1,\r\n            backgroundColor: 'rgba(75,192,192,0.4)',\r\n            borderColor: 'yellow',\r\n            borderCapStyle: 'butt',\r\n            borderDash: [],\r\n            borderDashOffset: 0.0,\r\n            borderJoinStyle: 'miter',\r\n            pointBorderColor: 'rgba(75,192,192,1)',\r\n            pointBackgroundColor: '#fff',\r\n            pointBorderWidth: 1,\r\n            pointHoverRadius: 5,\r\n            pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n            pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n            pointHoverBorderWidth: 2,\r\n            pointRadius: 1,\r\n            pointHitRadius: 10,\r\n            data: []\r\n          },\r\n          {\r\n            label: 'firstVaccinationsDaily',\r\n            fill: false,\r\n            lineTension: 0.1,\r\n            backgroundColor: 'rgba(75,192,192,0.4)',\r\n            borderColor: 'rgba(182,242,186)',\r\n            borderCapStyle: 'butt',\r\n            borderDash: [],\r\n            borderDashOffset: 0.0,\r\n            borderJoinStyle: 'miter',\r\n            pointBorderColor: 'rgba(75,192,192,1)',\r\n            pointBackgroundColor: '#fff',\r\n            pointBorderWidth: 1,\r\n            pointHoverRadius: 5,\r\n            pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n            pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n            pointHoverBorderWidth: 2,\r\n            pointRadius: 1,\r\n            pointHitRadius: 10,\r\n            data: []\r\n          },\r\n          {\r\n            label: 'secondVaccinationsDaily',\r\n            fill: false,\r\n            lineTension: 0.1,\r\n            backgroundColor: 'rgba(75,192,192,0.4)',\r\n            borderColor: 'rgba(4,208,17)',\r\n            borderCapStyle: 'butt',\r\n            borderDash: [],\r\n            borderDashOffset: 0.0,\r\n            borderJoinStyle: 'miter',\r\n            pointBorderColor: 'rgba(75,192,192,1)',\r\n            pointBackgroundColor: '#fff',\r\n            pointBorderWidth: 1,\r\n            pointHoverRadius: 5,\r\n            pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n            pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n            pointHoverBorderWidth: 2,\r\n            pointRadius: 1,\r\n            pointHitRadius: 10,\r\n            data: []\r\n          }\r\n          // {\r\n          //   label: 'COVID-19 patients admitted to hospital',\r\n          //   fill: false,\r\n          //   lineTension: 0.1,\r\n          //   backgroundColor: 'rgba(75,192,192,0.4)',\r\n          //   borderColor: 'blue',\r\n          //   borderCapStyle: 'butt',\r\n          //   borderDash: [],\r\n          //   borderDashOffset: 0.0,\r\n          //   borderJoinStyle: 'miter',\r\n          //   pointBorderColor: 'rgba(75,192,192,1)',\r\n          //   pointBackgroundColor: '#fff',\r\n          //   pointBorderWidth: 1,\r\n          //   pointHoverRadius: 5,\r\n          //   pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n          //   pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n          //   pointHoverBorderWidth: 2,\r\n          //   pointRadius: 1,\r\n          //   pointHitRadius: 10,\r\n          //   data: []\r\n          // }\r\n        ]\r\n      }\r\n    };\r\n  }\r\n\r\n  growthRate = ()=>{\r\n    const rRate = 0.07\r\n    let casesArray = this.state.data.datasets[0].data\r\n    let deathsArray = this.state.data.datasets[1].data\r\n    let hospArray = this.state.data.datasets[3].data\r\n\r\n    // console.log(this.state.data)\r\n    let labels = this.state.data.labels\r\n\r\n    \r\n    for (let i = 0; i < 28; i++) {\r\n\r\n      // let averageGrowthPercent = growthPercentage / daysToGoBack\r\n  \r\n      // console.log(averageGrowthPercent)\r\n      if (deathsArray[deathsArray.length -1] === null){\r\n        deathsArray.pop()\r\n      }\r\n  \r\n      let last_element = (casesArray[casesArray.length -1]) + (casesArray[casesArray.length -1] * rRate)\r\n      let last_element1 = (deathsArray[deathsArray.length -1]) + (deathsArray[deathsArray.length -1] * rRate)\r\n      let last_element3 = (hospArray[hospArray.length -1]) + (hospArray[casesArray.length -1] * rRate)\r\n\r\n      let date = moment(labels[labels.length -1]).add(1,'days').format('YYYY-MM-DD')\r\n  \r\n      casesArray.push(last_element)\r\n      deathsArray.push(last_element1)\r\n      hospArray.push(last_element3)\r\n      labels.push(date)\r\n      }\r\n\r\n      console.log(labels)\r\n\r\n      this.setState({\r\n        isLoaded: false,\r\n        deathsArray,\r\n        hospArray,\r\n        casesArray,\r\n        labels,\r\n        isLoaded: true,\r\n      })\r\n\r\n   \r\n\r\n  }\r\n\r\n  growth = ()=>{\r\n\r\n    let casesArray = this.state.data.datasets[0].data\r\n    let labels = this.state.data.labels\r\n    let arrayTotal = casesArray.length - 1\r\n    let daysToGoBack = 4 + 1\r\n    let arrayKey = arrayTotal - daysToGoBack\r\n    let past = casesArray[arrayKey]\r\n    let present = casesArray[arrayTotal]\r\n\r\n    // let growthPercentage = ((present - past) / past)\r\n    let growthPercentage = 0\r\n\r\n    let counter = 0;\r\n    let daysArray = 0\r\n    for (let i = 0; i < daysToGoBack; i++) {\r\n      let goBack = (daysToGoBack + i)\r\n      let pastKey = casesArray[arrayTotal - goBack + 1]\r\n      let presentKey = casesArray[arrayTotal - i]\r\n\r\n      growthPercentage = growthPercentage + ((presentKey - pastKey) / past)\r\n      // console.log(growthPercentage)\r\n    \r\n    }\r\n    // console.log(growthPercentage / daysToGoBack)\r\n\r\n    for (let i = 1; i < daysToGoBack; i++) {\r\n\r\n    let averageGrowthPercent = growthPercentage / daysToGoBack\r\n\r\n    // console.log(averageGrowthPercent)\r\n\r\n    let last_element = (casesArray[casesArray.length -1]) + (casesArray[casesArray.length -1] * averageGrowthPercent)\r\n\r\n    casesArray.push(last_element)\r\n    labels.push('test')\r\n    }\r\n\r\n    this.setState({\r\n      // isLoaded: false,\r\n      casesArray,\r\n      labels\r\n    })\r\n \r\n  }\r\n\r\n  totals(cases, deaths) {\r\n\r\n   let dataTotals = {...this.state.dataTotals}\r\n    dataTotals.totalCases = cases + dataTotals.totalCases\r\n    dataTotals.totalDeaths = deaths + dataTotals.totalDeaths\r\n\r\n    // console.log(dataTotals.totalDeaths)\r\nthis.setState({dataTotals})\r\n\r\n  }\r\n\r\n  addDateCasesDeaths(cases, deaths, dates, firstVaccinationsDaily, secondVaccinationsDaily) {\r\n\r\n    const test = this.state.dataTotals.totalDeaths / this.state.dataTotals.totalCases\r\n\r\n    var someProperty = {...this.state.data}\r\nsomeProperty.datasets[0].data.unshift(cases)\r\nsomeProperty.datasets[1].data.unshift(deaths)\r\nsomeProperty.datasets[2].data.unshift(deaths / test)\r\nsomeProperty.datasets[3].data.unshift(firstVaccinationsDaily)\r\nsomeProperty.datasets[4].data.unshift(secondVaccinationsDaily)\r\nsomeProperty.labels.unshift(dates)\r\nthis.setState({someProperty})\r\n\r\n  }\r\n\r\n//   addHospitalCases(cases) {\r\n//     let someProperty = {...this.state.data}\r\n// someProperty.datasets[3].data.unshift(cases)\r\n// this.setState({someProperty})\r\n\r\n//   }\r\n\r\n  componentDidMount() {\r\n    \r\n    // https://api.coronavirus.data.gov.uk/v1/data?filters=areaType%3Dnation%3BareaName%3Dengland&structure=%7B\"date\":\"date\",\"areaName\":\"areaName\",\"hospitalCases\":\"hospitalCases\"%7D\r\n      //API for patients admitted in hospital https://api.coronavirus.data.gov.uk/v1/data?filters=areaType%3Dnation%3BareaName%3Dengland&structure=%7B\"date\":\"date\",\"areaName\":\"areaName\",\"hospitalCases\":\"hospitalCases\"%7D\r\n    // fetch('https://api.coronavirus.data.gov.uk/v1/data?')\r\n    // .then(res => res.json())\r\n    // .then(\r\n    //   (result) => {\r\n    //     result.data.map(resultItem => {\r\n    //       this.addHospitalCases(resultItem.hospitalCases)\r\n    //     })\r\n\r\n    //     //Fix for the dates starting different in each API\r\n        \r\n    //     let i;\r\n    //     for (i = 0; i < 77; i++) {\r\n    //       this.addHospitalCases(0)\r\n    //     }\r\n\r\n    //     this.setState({\r\n    //       items: result.data,\r\n    //       isLoaded2: true\r\n    //     });\r\n    //   },\r\n    //   // Note: it's important to handle errors here\r\n    //   // instead of a catch() block so that we don't swallow\r\n    //   // exceptions from actual bugs in components.\r\n    //   (error) => {\r\n    //     this.setState({\r\n    //       isLoaded2: true,\r\n    //       error\r\n    //     });\r\n    //   }\r\n    // )\r\n\r\n    //API for cases and deaths\r\n\r\n    //https://api.coronavirus.data.gov.uk/v1/data?filters=areaType%3Dnation%3BareaName%3Dengland&structure=%7B\"date\"%3A\"date\"%2C\"name\"%3A\"areaName\"%2C\"code\"%3A\"areaCode\"%2C\"cases\"%3A%7B\"daily\"%3A\"newCasesByPublishDate\"%2C\"cumulative\"%3A\"cumCasesByPublishDate\"%7D%2C\"deaths\"%3A%7B\"daily\"%3A\"newDeathsByDeathDate\"%2C\"cumulative\"%3A\"cumDeathsByDeathDate\"%7D%7D\r\n    fetch('https://api.coronavirus.data.gov.uk/v1/data?')\r\n      .then(res => res.json())\r\n      .then(\r\n        (result) => {\r\n\r\n          result.data.map(resultItem => {\r\n            //Used to find the best data for deaths to cases\r\n            if(resultItem.date >= '2020-09-20' && resultItem.date < '2020-10-04'){\r\n              this.totals(resultItem.casesDaily, resultItem.deathsDaily)\r\n            }\r\n          })\r\n\r\n          result.data.map(resultItem => {\r\n            this.addDateCasesDeaths(resultItem.casesDaily, resultItem.deathsDaily, resultItem.date, resultItem.firstVaccinationsDaily, resultItem.secondVaccinationsDaily)\r\n          })\r\n\r\n          console.log(this.state.data)\r\n          this.setState({\r\n            isLoaded2: true,\r\n            isLoaded: true,\r\n            // items: result.data\r\n          });\r\n        },\r\n\r\n      \r\n        // Note: it's important to handle errors here\r\n        // instead of a catch() block so that we don't swallow\r\n        // exceptions from actual bugs in components.\r\n        (error) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            error\r\n          });\r\n        }\r\n      )\r\n\r\n      console.log(this.state.data.datasets);\r\n  }\r\n\r\n  render() {\r\n\r\n    const { error, isLoaded, isLoaded2, data} = this.state;\r\n    if (error) {\r\n      return <div>Error: {error.message}</div>;\r\n    } else if (!isLoaded || !isLoaded2) {\r\n      return <div>Loading...</div>;\r\n    } else {\r\n      // this.growth()\r\n      return (\r\n        <div>\r\n        <Line\r\n        data={data} redraw\r\n        width={100}\r\n        height={500}\r\n        options={{\r\n          maintainAspectRatio: false\r\n        }}\r\n      />\r\n      <button onClick={this.growthRate}>\r\n  Generate R rate prediction\r\n</button>\r\n</div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";"],"sourceRoot":""}